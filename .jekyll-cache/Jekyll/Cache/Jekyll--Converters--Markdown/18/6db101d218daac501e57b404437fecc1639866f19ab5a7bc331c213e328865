I"`<h2 id="základní-práce-se-semafory">Základní práce se semafory</h2>

<h4 id="užitečné-odkazy">Užitečné odkazy</h4>
<ul>
  <li><a href="https://docs.python.org/3/library/threading.html#semaphore-objects">Python Semaphore Objects</a></li>
  <li><a href="/assets/files/2020/lecture02.ipynb">Zdrojové kódy z cvičení formou notebooku</a></li>
</ul>

<h3 id="objekt-semaphore">Objekt <code class="language-plaintext highlighter-rouge">Semaphore</code></h3>
<p><code class="language-plaintext highlighter-rouge">Semaphore</code> je třída reprezentující synchronizační primitivum semafor. Semafor je při vytvoření nastaven na určitou hodnotu. Z teorie známe dvě funkce <code class="language-plaintext highlighter-rouge">P()</code> a <code class="language-plaintext highlighter-rouge">V()</code>, které tuto hodnotu mění, v Python3 jsou tyto funkce pojmenovány <code class="language-plaintext highlighter-rouge">acquire()</code> a <code class="language-plaintext highlighter-rouge">release()</code>.</p>

<div class="task">
<p><span>Úkol</span><br />Pomoci semaforu můžeme elegantně implementovat takzvaný <code>mutex</code> a vyřešít tím problém z předchozí hodiny. Upravte tedy sdílený čítač tak, aby byla hodnota vždy správná.</p>
</div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">threading</span>

<span class="k">def</span> <span class="nf">increment</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">counter</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100000</span><span class="p">):</span>
        <span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="c1">## Globální counter        
</span><span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span>    

<span class="n">thread1</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">increment</span><span class="p">)</span>
<span class="n">thread2</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">increment</span><span class="p">)</span>

<span class="c1">## Spustíme thread
</span><span class="n">thread1</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
<span class="n">thread2</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>

<span class="c1">## Počkáme na to až thread doběhne
</span><span class="n">thread1</span><span class="p">.</span><span class="n">join</span><span class="p">()</span>
<span class="n">thread2</span><span class="p">.</span><span class="n">join</span><span class="p">()</span>

<span class="k">print</span><span class="p">(</span><span class="n">counter</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<blockquote>
  <h2 id="úkol">Úkol</h2>
  <p>Následující kód doplňte o synchronizaci, tak aby byl <code class="language-plaintext highlighter-rouge">print()</code> prováděn ve správném pořadí. Synchronizace by neměla být příliš silná, například nás nezajímá v jakém pořadí bude vypsáno <code class="language-plaintext highlighter-rouge">Print before B</code> a <code class="language-plaintext highlighter-rouge">Print before A</code>.</p>
</blockquote>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">threading</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">random</span>

<span class="k">def</span> <span class="nf">thread_a_function</span><span class="p">():</span>
    <span class="c1"># Náhodné čekání, simuluje pomalejší/rychlejší vlákno
</span>    <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="n">uniform</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
    <span class="c1"># Obsah vlákna
</span>    <span class="k">print</span><span class="p">(</span><span class="s">"Print before B"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"A"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">thread_b_function</span><span class="p">():</span>
    <span class="c1"># Náhodné čekání, simuluje pomalejší/rychlejší vlákno
</span>    <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="n">uniform</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
    <span class="c1"># Obsah vlákna
</span>    <span class="k">print</span><span class="p">(</span><span class="s">"Print before A"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"B"</span><span class="p">)</span>


<span class="n">thread_a</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">thread_a_function</span><span class="p">)</span>
<span class="n">thread_b</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">thread_b_function</span><span class="p">)</span>

<span class="n">thread_a</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
<span class="n">thread_b</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></figure>

:ET