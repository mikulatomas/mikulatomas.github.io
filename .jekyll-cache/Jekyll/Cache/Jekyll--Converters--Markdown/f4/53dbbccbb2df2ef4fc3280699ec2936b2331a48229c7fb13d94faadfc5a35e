I""0<h2 id="simulátor-distribuované-sítě-2">Simulátor distribuované sítě (2)</h2>

<h4 id="užitečné-odkazy">Užitečné odkazy</h4>
<ul>
  <li><a href="https://docs.python.org/3.8/library/multiprocessing.html">Python <code class="language-plaintext highlighter-rouge">multiprocessing</code> — Process-based parallelism</a></li>
  <li><a href="https://medium.com/@daetam/class-structure-in-python-297792428ef0">Class structure in Python</a></li>
</ul>

<h3 id="odbočka-struktura-knihovny">Odbočka: Struktura knihovny</h3>
<p>Naši knihovnu bude vhodné rozdělit minimálně do několika souborů. Dobrým zvykem je udržovat jednu třídu v jednom Python souboru. Soubor by měl být pojmenován malými písmeny. Například tedy <code class="language-plaintext highlighter-rouge">nazev_tridy.py</code>, v tomto souboru je umístěna třída <code class="language-plaintext highlighter-rouge">NazevTridy</code>. Z ostatních souborů mohu poté provádět import této třídy za pomoci výrazu <code class="language-plaintext highlighter-rouge">from nazev_tridy import NazevTridy</code>.</p>

<p>Ukázková struktura projektu by tedy mohla být následující:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span><span class="n">r</span><span class="o">--</span>  <span class="mi">1</span> <span class="n">tomasmikula</span>  <span class="n">staff</span>  <span class="mi">1032</span> <span class="n">Oct</span> <span class="mi">31</span> <span class="mi">18</span><span class="p">:</span><span class="mi">44</span> <span class="n">main</span><span class="p">.</span><span class="n">py</span>
<span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span><span class="n">r</span><span class="o">--</span>  <span class="mi">1</span> <span class="n">tomasmikula</span>  <span class="n">staff</span>  <span class="mi">1067</span> <span class="n">Oct</span> <span class="mi">31</span> <span class="mi">18</span><span class="p">:</span><span class="mi">29</span> <span class="n">network</span><span class="p">.</span><span class="n">py</span>
<span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span><span class="n">r</span><span class="o">--</span>  <span class="mi">1</span> <span class="n">tomasmikula</span>  <span class="n">staff</span>   <span class="mi">681</span> <span class="n">Oct</span> <span class="mi">30</span> <span class="mi">21</span><span class="p">:</span><span class="mi">35</span> <span class="n">node</span><span class="p">.</span><span class="n">py</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>V souboru <code class="language-plaintext highlighter-rouge">main.py</code> provádíme základní vytvoření sítě a nastavení topologie. Takto vytvořené třídy můžeme importovat i v rámci interaktivní konzole Pythonu, nemusíme tedy vůbec vytvářet hlavní soubor.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">logging</span>
<span class="kn">import</span> <span class="nn">multiprocessing</span>
<span class="kn">import</span> <span class="nn">time</span>

<span class="kn">from</span> <span class="nn">multiprocessing.connection</span> <span class="kn">import</span> <span class="n">wait</span>
<span class="kn">from</span> <span class="nn">multiprocessing</span> <span class="kn">import</span> <span class="n">Pipe</span><span class="p">,</span> <span class="n">Process</span><span class="p">,</span> <span class="n">current_process</span>

<span class="c1"># Importy z nasi knihovny
</span><span class="kn">from</span> <span class="nn">network</span> <span class="kn">import</span> <span class="n">Network</span>

<span class="c1"># Konstatnty
</span><span class="n">TOPOLOGY</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">False</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="bp">False</span><span class="p">],</span>
            <span class="p">[</span><span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">True</span><span class="p">],</span>
            <span class="p">[</span><span class="bp">True</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">]]</span>

<span class="n">LOGGER</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="p">.</span><span class="n">log_to_stderr</span><span class="p">()</span>
<span class="n">LOGGER</span><span class="p">.</span><span class="n">setLevel</span><span class="p">(</span><span class="n">logging</span><span class="p">.</span><span class="n">INFO</span><span class="p">)</span>

<span class="c1"># Definice funkci
</span><span class="k">def</span> <span class="nf">function</span><span class="p">():</span>
    <span class="s">"""Function for node"""</span>

    <span class="n">node</span> <span class="o">=</span> <span class="n">current_process</span><span class="p">()</span>

    <span class="k">for</span> <span class="n">output_node</span> <span class="ow">in</span> <span class="n">node</span><span class="p">.</span><span class="n">out_pipes</span><span class="p">.</span><span class="n">values</span><span class="p">():</span>
        <span class="k">for</span> <span class="n">connection</span> <span class="ow">in</span> <span class="n">output_node</span><span class="p">:</span>
            <span class="n">connection</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="s">"Msg from node {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">name</span><span class="p">))</span>

    <span class="k">for</span> <span class="n">input_node</span> <span class="ow">in</span> <span class="n">node</span><span class="p">.</span><span class="n">in_pipes</span><span class="p">.</span><span class="n">values</span><span class="p">():</span>
        <span class="k">for</span> <span class="n">connection</span> <span class="ow">in</span> <span class="n">input_node</span><span class="p">:</span>
            <span class="n">LOGGER</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"Node: {}, Msg: {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                                                   <span class="n">connection</span><span class="p">.</span><span class="n">recv</span><span class="p">()))</span>

    <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>


<span class="c1"># main, tento kod nebude spusten pri beznem importu,
# pouze pri spusteni souboru python main.py
</span><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">NETWORK</span> <span class="o">=</span> <span class="n">Network</span><span class="p">([</span><span class="n">function</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">TOPOLOGY</span><span class="p">))],</span> <span class="n">TOPOLOGY</span><span class="p">)</span>
    <span class="n">NETWORK</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
    <span class="n">NETWORK</span><span class="p">.</span><span class="n">join</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h3 id="rozšíření-knihovny-možnost-předávat-argumenty-uzlům">Rozšíření knihovny: Možnost předávat argumenty uzlům</h3>
<p>Aktuálně umí naše knihovna spouštět každý uzel s jiným kódem. Neumí však předávat argumenty funkci v daném uzlu. Upravte knihovnu tak, aby kromě seznamu funkcí bylo možné předat i seznam argumentů (seznam tuples).</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre><span class="n">NETWORK</span> <span class="o">=</span> <span class="n">Network</span><span class="p">(</span>
    <span class="p">[</span><span class="n">function1</span><span class="p">,</span> <span class="n">function2</span><span class="p">,</span> <span class="n">function3</span><span class="p">],</span>
    <span class="p">[(</span><span class="mi">1</span><span class="p">,),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,)],</span>
    <span class="n">TOPOLOGY</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h3 id="rozšíření-knihovny-možnost-přijímat-zprávy-pouze-od-nějakého-uzlu">Rozšíření knihovny: Možnost přijímat zprávy pouze od nějakého uzlu</h3>
<p>Do knihovny přidejte funkcionalitu, aby v kódu uzlu bylo možné přijímat zprávy pouze od jiného názvem určeného uzlu.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre><span class="n">node</span> <span class="o">=</span> <span class="n">current_process</span><span class="p">()</span>

<span class="c1"># prijme zpravy pouze od Node s nazvem "0"
</span><span class="n">node</span><span class="p">.</span><span class="n">recv_from</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h3 id="rozšíření-knihovny-možnost-zaslat-zprávu-cílovému-uzlu">Rozšíření knihovny: Možnost zaslat zprávu cílovému uzlu</h3>
<p>Do knihovny přidejte funkcionalitu, aby v kódu uzlu bylo možné posílat zprávy jinému názvem určenému uzlu.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre><span class="n">node</span> <span class="o">=</span> <span class="n">current_process</span><span class="p">()</span>

<span class="c1"># prijme zpravy pouze od Node s nazvem "0"
</span><span class="n">node</span><span class="p">.</span><span class="n">send_to</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">msg</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h3 id="rozšíření-knihovny-možnost-příjmutí-náhodné-zprávy">Rozšíření knihovny: Možnost příjmutí náhodné zprávy</h3>
<p>Do knihovny pridejte funkcionalitu, aby v kódu uzlu bylo možné přijmout náhodnou zprávu z jakéhokoli input kanálu, který nějakou zprávu obsahuje.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre><span class="n">node</span> <span class="o">=</span> <span class="n">current_process</span><span class="p">()</span>

<span class="n">node</span><span class="p">.</span><span class="n">recv_any</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></figure>

:ET