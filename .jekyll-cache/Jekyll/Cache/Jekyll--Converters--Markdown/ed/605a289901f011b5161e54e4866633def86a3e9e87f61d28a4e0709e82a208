I"±P<h2 id="simul√°tor-distribuovan√©-s√≠tƒõ">Simul√°tor distribuovan√© s√≠tƒõ</h2>

<h4 id="u≈æiteƒçn√©-odkazy">U≈æiteƒçn√© odkazy</h4>
<ul>
  <li><a href="https://docs.python.org/3.8/library/multiprocessing.html">Python <code class="language-plaintext highlighter-rouge">multiprocessing</code> ‚Äî Process-based parallelism</a></li>
</ul>

<h3 id="distribuovan√°-s√≠≈•">Distribuovan√° s√≠≈•</h3>
<p>Distribuovan√° s√≠≈• obsahuje nƒõkolik uzl≈Ø a komunikaƒçn√≠ch kan√°l≈Ø, kter√© propojuj√≠ jednotliv√© uzly. Pomoci komunikaƒçn√≠ch kan√°l≈Ø maj√≠ uzly mo≈ænost zas√≠lat a p≈ôij√≠mat zpr√°vy.</p>

<p>Distribuovan√° s√≠≈• o t≈ôech uzlech m≈Ø≈æe vypadat n√°sledovnƒõ:</p>

<p><img src="/assets/images/PDS/lecture07/img_0.png" class="center" srcset="/assets/images/PDS/lecture07/img_0@2x.png 2x" /></p>

<p>Topologii takov√© s√≠tƒõ m≈Ø≈æeme zapsat stejnƒõ jako orientovan√Ω graf:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre><span class="n">TOPOLOGY</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">[</span><span class="bp">False</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="bp">False</span><span class="p">],</span>
    <span class="p">[</span><span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">True</span><span class="p">],</span>
    <span class="p">[</span><span class="bp">True</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">]</span>
<span class="p">]</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Pokud se pod√≠v√°me na uzel <code class="language-plaintext highlighter-rouge">N1</code> vid√≠me, ≈æe obsahuje jeden vstupn√≠ a jeden v√Ωstupn√≠ kan√°l.</p>

<p><img src="/assets/images/PDS/lecture07/img_1.png" class="center" srcset="/assets/images/PDS/lecture07/img_1@2x.png 2x" /></p>

<p>Ka≈æd√©mu uzlu je mo≈æn√© p≈ôedat zdrojov√Ω k√≥d, kter√Ω m√° uzel vykon√°vat. V r√°mci tohoto zdrojov√©ho k√≥du jsou p≈ô√≠stupny v≈°echny komunikaƒçn√≠ kan√°ly a n√°zev dan√©ho uzlu. Volitelnƒõ by mƒõlo b√Ωt mo≈æn√© zjistit n√°zev procesu z/do kter√©ho komunikaƒçn√≠ kan√°l vede.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="kn">from</span> <span class="nn">multiprocessing</span> <span class="kn">import</span> <span class="n">current_process</span>

<span class="k">def</span> <span class="nf">function</span><span class="p">():</span>
    <span class="s">"""Function for node"""</span>

    <span class="n">node</span> <span class="o">=</span> <span class="n">current_process</span><span class="p">()</span>

    <span class="k">for</span> <span class="n">connection</span> <span class="ow">in</span> <span class="n">node</span><span class="p">.</span><span class="n">out_pipes</span><span class="p">:</span>
        <span class="n">connection</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="s">"Msg from node {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">name</span><span class="p">))</span>

    <span class="k">for</span> <span class="n">connection</span> <span class="ow">in</span> <span class="n">node</span><span class="p">.</span><span class="n">in_pipes</span><span class="p">:</span>
        <span class="n">connection</span><span class="p">.</span><span class="n">recv</span><span class="p">()</span>

    <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>V prvn√≠m st√°diu by mƒõla knihovna fungovat n√°sledovnƒõ:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="n">TOPOLOGY</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">False</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="bp">False</span><span class="p">],</span>
            <span class="p">[</span><span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">True</span><span class="p">],</span>
            <span class="p">[</span><span class="bp">True</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">]]</span>

<span class="c1"># functions - pole funkci pro uzly, delky rovn√© poƒçtu uzl≈Ø
</span>
<span class="n">NETWORK</span> <span class="o">=</span> <span class="n">Network</span><span class="p">(</span><span class="n">functions</span><span class="p">,</span> <span class="n">TOPOLOGY</span><span class="p">)</span>

<span class="n">NETWORK</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
<span class="n">NETWORK</span><span class="p">.</span><span class="n">join</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>T≈ô√≠da <code class="language-plaintext highlighter-rouge">Network</code> obsahuje n√°sleduj√≠c√≠ metody:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="k">class</span> <span class="nc">Network</span><span class="p">():</span>
    <span class="s">"""Represents distributed network"""</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">functions</span><span class="p">,</span> <span class="n">topology</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"""Starts all nodes in the network"""</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">terminate</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"""Terminate all nodes in the network"""</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">kill</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"""Kill all nodes in the network"""</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">join</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"""Join all nodes in the network"""</span>
        <span class="k">pass</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h3 id="t≈ô√≠da-multiprocessingprocess">T≈ô√≠da <code class="language-plaintext highlighter-rouge">multiprocessing.Process</code></h3>
<p>Reprezentuje aktivitu, kter√° bƒõ≈æ√≠ v samostatn√©m procesu. Pro reprezentaci pou≈æijeme t≈ô√≠du <code class="language-plaintext highlighter-rouge">Process</code> s upravenou funkcionalitou. V√≠ce informac√≠ naleznete <a href="https://docs.python.org/3.8/library/multiprocessing.html#multiprocessing.Process">zde</a>.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="kn">from</span> <span class="nn">multiprocessing</span> <span class="kn">import</span> <span class="n">Process</span>

<span class="k">class</span> <span class="nc">Node</span><span class="p">(</span><span class="n">Process</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">function</span><span class="p">):</span>
        <span class="n">Process</span><span class="p">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">,</span> <span class="n">target</span><span class="o">=</span><span class="n">function</span><span class="p">)</span>
        <span class="p">...</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h3 id="t≈ô√≠da-multiprocessingpipe">T≈ô√≠da <code class="language-plaintext highlighter-rouge">multiprocessing.Pipe</code></h3>
<p>Komunikaƒçn√≠ kan√°l mezi dvƒõma procesy. Po vytvo≈ôen√≠ objektu <code class="language-plaintext highlighter-rouge">Pipe</code> je vr√°cena dvojice objektu <code class="language-plaintext highlighter-rouge">Connection</code>. Prvn√≠ reprezentuje c√≠lov√Ω uzel (m≈Ø≈æeme pouze p≈ôij√≠mat), druh√Ω poƒç√°teƒçn√≠ (m≈Ø≈æe pouze odes√≠lat). Objekt budeme vytv√°≈ôet s parametrem <code class="language-plaintext highlighter-rouge">duplex=False</code>, ten za≈ô√≠d√≠, ≈æe komunikaƒçn√≠ kan√°l je jednosmƒõrn√Ω. V√≠ce informac√≠ naleznete <a href="https://docs.python.org/3.8/library/multiprocessing.html#multiprocessing.Pipe">zde</a>.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="n">reciever</span><span class="p">,</span> <span class="n">sender</span> <span class="o">=</span> <span class="n">Pipe</span><span class="p">(</span><span class="n">duplex</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="p">...</span>

<span class="c1"># Ode≈°leme zpr√°vu
</span><span class="n">sender</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="s">"Test"</span><span class="p">)</span>

<span class="p">...</span>

<span class="c1"># P≈ô√≠jmeme zpr√°vu na druh√©m konci
</span><span class="n">reciever</span><span class="p">.</span><span class="n">recv</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>T≈ô√≠da <code class="language-plaintext highlighter-rouge">Node</code> obsahuje n√°sleduj√≠c√≠ metody:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="k">class</span> <span class="nc">Node</span><span class="p">(</span><span class="n">Process</span><span class="p">):</span>
    <span class="s">"""Represents one node in the distributed network"""</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">function</span><span class="p">):</span>
        <span class="n">Process</span><span class="p">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">,</span> <span class="n">target</span><span class="o">=</span><span class="n">function</span><span class="p">)</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">add_in_pipe</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">pipe</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">add_out_pipe</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">pipe</span><span class="p">):</span>
        <span class="k">pass</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h3 id="logov√°n√≠">Logov√°n√≠</h3>
<p>V r√°mci multiprocessingu je mo≈æn√© pou≈æ√≠vat glob√°ln√≠ logger. Pou≈æ√≠t√≠ je vidƒõt na p≈ô√≠kladu:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">logging</span>
<span class="kn">import</span> <span class="nn">multiprocessing</span>

<span class="n">LOGGER</span> <span class="o">=</span> <span class="n">multiprocessing</span><span class="p">.</span><span class="n">log_to_stderr</span><span class="p">()</span>
<span class="n">LOGGER</span><span class="p">.</span><span class="n">setLevel</span><span class="p">(</span><span class="n">logging</span><span class="p">.</span><span class="n">INFO</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">function</span><span class="p">():</span>
    <span class="s">"""Function for node"""</span>

    <span class="n">node</span> <span class="o">=</span> <span class="n">current_process</span><span class="p">()</span>

    <span class="k">for</span> <span class="n">output_node</span> <span class="ow">in</span> <span class="n">node</span><span class="p">.</span><span class="n">out_pipes</span><span class="p">:</span>
        <span class="n">output_node</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="s">"Msg from node {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">name</span><span class="p">))</span>

    <span class="k">for</span> <span class="n">input_node</span> <span class="ow">in</span> <span class="n">node</span><span class="p">.</span><span class="n">in_pipes</span><span class="p">:</span>
        <span class="n">LOGGER</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"Node: {}, Msg: {}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                                               <span class="n">input_node</span><span class="p">.</span><span class="n">recv</span><span class="p">()))</span>

    <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>V pozdƒõj≈°√≠ verzi by mƒõla knihovna umƒõt logovat do soubor≈Ø, n√°zvy tƒõchto soubor≈Ø budou korespondovat s n√°zvy uzl≈Ø. V√≠ce informac√≠ o logov√°n√≠ v knihovnƒõ <code class="language-plaintext highlighter-rouge">multiprocessing</code> naleznete <a href="https://docs.python.org/3.8/library/multiprocessing.html#logging">zde</a></p>

<div class="task">
<p><span>√ökol</span><br />
Naprogramujte z√°kladn√≠ verzi knihovny, kter√° umo≈æ≈à√≠ vytvo≈ôit distribuovan√Ω syst√©m na z√°kladnƒõ p≈ôedan√© topologie. Knihovnu otestujte na jednoduch√©m p≈ô√≠kladu, kdy ka≈æd√Ω uzel po≈°le informaƒçn√≠ zpr√°vu sousedu.</p></div>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="n">TOPOLOGY</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">False</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="bp">False</span><span class="p">],</span>
            <span class="p">[</span><span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">True</span><span class="p">],</span>
            <span class="p">[</span><span class="bp">True</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">]]</span>

<span class="n">Uk√°zkov√Ω</span> <span class="n">log</span><span class="p">:</span>

<span class="p">[</span><span class="n">INFO</span><span class="o">/</span><span class="mi">0</span><span class="p">]</span> <span class="n">child</span> <span class="n">process</span> <span class="n">calling</span> <span class="bp">self</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>
<span class="p">[</span><span class="n">INFO</span><span class="o">/</span><span class="mi">1</span><span class="p">]</span> <span class="n">child</span> <span class="n">process</span> <span class="n">calling</span> <span class="bp">self</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>
<span class="p">[</span><span class="n">INFO</span><span class="o">/</span><span class="mi">0</span><span class="p">]</span> <span class="n">Node</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="n">Msg</span><span class="p">:</span> <span class="n">Msg</span> <span class="k">from</span> <span class="n">node</span> <span class="mi">1</span>
<span class="p">[</span><span class="n">INFO</span><span class="o">/</span><span class="mi">2</span><span class="p">]</span> <span class="n">child</span> <span class="n">process</span> <span class="n">calling</span> <span class="bp">self</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>
<span class="p">[</span><span class="n">INFO</span><span class="o">/</span><span class="mi">2</span><span class="p">]</span> <span class="n">Node</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="n">Msg</span><span class="p">:</span> <span class="n">Msg</span> <span class="k">from</span> <span class="n">node</span> <span class="mi">0</span>
<span class="p">[</span><span class="n">INFO</span><span class="o">/</span><span class="mi">1</span><span class="p">]</span> <span class="n">Node</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="n">Msg</span><span class="p">:</span> <span class="n">Msg</span> <span class="k">from</span> <span class="n">node</span> <span class="mi">2</span>
<span class="p">[</span><span class="n">INFO</span><span class="o">/</span><span class="mi">0</span><span class="p">]</span> <span class="n">process</span> <span class="n">shutting</span> <span class="n">down</span>
<span class="p">[</span><span class="n">INFO</span><span class="o">/</span><span class="mi">0</span><span class="p">]</span> <span class="n">process</span> <span class="n">exiting</span> <span class="k">with</span> <span class="n">exitcode</span> <span class="mi">0</span>
<span class="p">[</span><span class="n">INFO</span><span class="o">/</span><span class="mi">1</span><span class="p">]</span> <span class="n">process</span> <span class="n">shutting</span> <span class="n">down</span>
<span class="p">[</span><span class="n">INFO</span><span class="o">/</span><span class="mi">2</span><span class="p">]</span> <span class="n">process</span> <span class="n">shutting</span> <span class="n">down</span>
<span class="p">[</span><span class="n">INFO</span><span class="o">/</span><span class="mi">1</span><span class="p">]</span> <span class="n">process</span> <span class="n">exiting</span> <span class="k">with</span> <span class="n">exitcode</span> <span class="mi">0</span>
<span class="p">[</span><span class="n">INFO</span><span class="o">/</span><span class="mi">2</span><span class="p">]</span> <span class="n">process</span> <span class="n">exiting</span> <span class="k">with</span> <span class="n">exitcode</span> <span class="mi">0</span>
<span class="p">[</span><span class="n">INFO</span><span class="o">/</span><span class="n">MainProcess</span><span class="p">]</span> <span class="n">process</span> <span class="n">shutting</span> <span class="n">down</span>
</pre></td></tr></tbody></table></code></pre></figure>

:ET